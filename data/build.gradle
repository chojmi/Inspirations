apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'

android {
    publishNonDefault true

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        mock {

        }
        prod {
            buildConfigField "String", "API_KEY", "\"" + getApiKey() + "\""
            buildConfigField "String", "API_SECRET_KEY", "\"" + getApiSecretKey() + "\""
        }
    }

    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def getApiKey() {
    def Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['API_KEY']
}


def getApiSecretKey() {
    def Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['API_SECRET_KEY']
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(":domain")
    compile "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    compile "com.google.guava:guava:${rootProject.ext.guavaLibVersion}"

    compile "io.reactivex.rxjava2:rxandroid:${rootProject.ext.rxAndroidLibVersion}"
    compile "io.reactivex.rxjava2:rxjava:${rootProject.ext.rxJavaLibVersion}"

    compile "com.google.dagger:dagger:${rootProject.ext.daggerLibVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.ext.daggerLibVersion}"

    compile "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.loggingInterceptorLibVersion}"
    compile "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofitLibVersion}"
    compile "com.squareup.retrofit2:converter-gson:${rootProject.ext.retrofitLibVersion}"
    compile "com.squareup.retrofit2:adapter-rxjava:${rootProject.ext.retrofitLibVersion}"
    compile "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:${rootProject.ext.retrofitRxJavaLibVersion}"

    compile "com.google.code.gson:gson:${rootProject.ext.gsonLibVersion}"

    //AutoValue
    provided "com.google.auto.value:auto-value:$rootProject.ext.autovalueLibVersion"
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:$rootProject.ext.autovalueParcelLibVersion"
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel-adapter:$rootProject.ext.autovalueParcelLibVersion"
    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:$rootProject.autovalueGsonLibVersion"

    //Stream Java 8
    compile "com.annimon:stream:$rootProject.ext.annimonStreamLibVersion"

    //Event logging
    compile "com.jakewharton.timber:timber:$rootProject.ext.timberLibVersion"

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
}